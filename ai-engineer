#!./.venv/bin/python

"""
ai-engineer command line interface
"""

import os
from common.utils import *
from pathlib import Path
import argparse

# Set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'global.settings')
import django
django.setup()


def ping(args):
    """
    Proof of life. Reverses a provided text string.
    """
    if not args.text:
        print('Please provide a text field in the request body')
        return

    input_text = args.text

    if not isinstance(input_text, str):
        print('Text field must be a string')
        return

    if len(input_text) > 1024:
        print('Text must not exceed 1024 characters')
        return

    reversed_text = input_text[::-1]

    print({
        'ping': input_text,
        'pong': reversed_text
    })

def ragindex_list(args):
    """
    List repositories for RAG
    """
    from common.ragindex.list import list_repositories

    repos = list_repositories()
    print(repos)

def ragindex_vectorize(args):
    """
    Vectorize repository
    """
    from common.ragindex.vectorize import vectorize_repository

    repo = args.repo
    if not repo:
        print('Please provide a repository owner/repo/branch')
        return

    vectorize_repository(repo)

def ragindex_delete(args):
    """
    Delete repository
    """
    from common.ragindex.delete import delete_repository

    repo = args.repo
    if not repo:
        print('Please provide a repository owner/repo/branch')
        return

    delete_repository(repo)

def setup_newindex(args):
    """
    Setup new index for RAG
    """
    from common.setup.newindex import new_index
    print(new_index())





def clone_list(args):
    """
    List local repository clones
    """
    from common.clone.list import list_clones

    clones = list_clones()
    print(clones)

def clone_create(args):
    """
    Create local repository clone
    """
    from common.clone.create import create_clone

    repo = args.repo
    if not repo:
        print('Please provide a repository owner/repo/branch')
        return

    print (create_clone(repo))

def clone_delete(args):
    """
    Delete local repository clone
    """
    from common.clone.delete import delete_clone

    repo = args.repo
    if not repo:
        print('Please provide a repository owner/repo/branch')
        return

    print (delete_clone(repo))

def agent_analyze(command, args):
    """
    Analyze a local repository clone
    """
    from common.agent.analyze import agent_analyze

    repo = args.repo
    if not repo:
        print('Please provide a repository owner/repo/branch')
        return

    analysis = agent_analyze(command, repo)

    if 'error' in analysis:
        print(analysis)
        print("Error: unknown error")
        return

    if not 'content' in analysis:
        print(analysis)
        print("Error: analyze content not found")
        return

    print(analysis['content'])

    if args.save:
        savefile = f"{command}.md"

        print('Saving analysis to clone: ', savefile)
        from common.clone.write_file import write_file
        try:
            write_file(
                repo,
                settings.CLONE_AI_ENGINEER_DIR,
                savefile,
                analysis['content']
            )
        except Exception as e:
            print(e)
            print('Error writing file')

    return

def agent_analyze_codereview(args):
    """
    Code review of a local repository clone
    """
    agent_analyze('code_review', args)

def agent_analyze_projectcontext(args):
    """
    Project context of a local repository clone
    """
    agent_analyze('project_context', args)








def chat_prompt(args):
    """
    Chat with LLM
    """
    from common.llm.prompt import process_chat_prompt
    prompt = args.prompt
    if not prompt:
        print('Please supply a prompt')
        return
    repo = args.repo
    context = args.context
    print (process_chat_prompt(prompt, repo, context))
    print('repo: ', repo)

def env(args):
    """
    Display environment variables from settings
    """
    env_vars = {
        'API_SERVER_PORT': django.conf.settings.API_SERVER_PORT,
        'GITHUB_CLONE_DIR': django.conf.settings.GITHUB_CLONE_DIR,
        'GITHUB_TOKEN': django.conf.settings.GITHUB_TOKEN,
        'OPENAI_API_KEY': django.conf.settings.OPENAI_API_KEY,
        'PINECONE_ENVIRONMENT': django.conf.settings.PINECONE_ENVIRONMENT,
        'PINECONE_API_KEY': django.conf.settings.PINECONE_API_KEY,
        'PINECONE_INDEX': django.conf.settings.PINECONE_INDEX,
        'EMBEDDING_DIMENSIONS': django.conf.settings.EMBEDDING_DIMENSIONS,
        'LANGCHAIN_TRACING_V2': django.conf.settings.LANGCHAIN_TRACING_V2,
        'LANGCHAIN_ENDPOINT': django.conf.settings.LANGCHAIN_ENDPOINT,
        'LANGCHAIN_API_KEY': django.conf.settings.LANGCHAIN_API_KEY,
        'LANGCHAIN_PROJECT': django.conf.settings.LANGCHAIN_PROJECT,
        'TAVILY_API_KEY': django.conf.settings.TAVILY_API_KEY
    }

    for key, value in env_vars.items():
        print(f'{key}: {value}')


if __name__ == '__main__':
    # root parser
    parser = argparse.ArgumentParser(prog='PROG')
    parser.add_argument('--json', action='store_true', help='produce JSON output')

    # command sub-parsers
    sub_parsers = parser.add_subparsers(help='sub-command help')

    # llm/prompt
    parser_llm_prompt = sub_parsers.add_parser('llm', help='chat with LLM')
    parser_llm_prompt.add_argument('--prompt', type=str, help='text to prompt LLM')
    parser_llm_prompt.add_argument('--repo',  type=str, help='repository owner/repo/branch')
    parser_llm_prompt.add_argument('--context',  type=str, help='filenames, array')
    parser_llm_prompt.set_defaults(func=chat_prompt)

    # ragindex command and subcommands
    parser_ragindex = sub_parsers.add_parser('ragindex', help='rag index commands')
    ragindex_sub_parsers = parser_ragindex.add_subparsers(help='ragindex sub-commands')

    # ragindex list
    parser_ragindex_list = ragindex_sub_parsers.add_parser('list', help='list repositories for RAG')
    parser_ragindex_list.set_defaults(func=ragindex_list)

    # ragindex vectorize
    parser_ragindex_vectorize = ragindex_sub_parsers.add_parser('vectorize', help='vectorize repository')
    parser_ragindex_vectorize.add_argument('--repo', type=str, help='repository owner/repo/branch')
    parser_ragindex_vectorize.set_defaults(func=ragindex_vectorize)

    # repo delete
    parser_ragindex_delete = ragindex_sub_parsers.add_parser('delete', help='delete repository')
    parser_ragindex_delete.add_argument('--repo', type=str, help='repository owner/repo/branch')
    parser_ragindex_delete.set_defaults(func=ragindex_delete)



    # agent command and subcommands
    parser_agent = sub_parsers.add_parser('agent', help='ai agents')
    agent_sub_parsers = parser_agent.add_subparsers(help='available agents')

    # agent analyze command and subcommands
    parser_agent_analyze = agent_sub_parsers.add_parser('analyze', help='analysis commands')
    analyze_sub_parsers = parser_agent_analyze.add_subparsers(help='analyze sub-commands')

    # agent analyze: codereview
    parser_agent_analyze_codereview = analyze_sub_parsers.add_parser('codereview', help='code review of a local clone')
    parser_agent_analyze_codereview.add_argument('--repo', type=str, help='local clone owner/repo/branch')
    parser_agent_analyze_codereview.add_argument('--save', type=bool, help='write the analysis to the clone')
    parser_agent_analyze_codereview.set_defaults(func=agent_analyze_codereview)

    # agent analyze: projectcontext
    parser_agent_analyze_projectcontext = analyze_sub_parsers.add_parser('projectcontext', help='project context of a local clone')
    parser_agent_analyze_projectcontext.add_argument('--repo', type=str, help='local clone owner/repo/branch')
    parser_agent_analyze_projectcontext.add_argument('--save', type=bool, help='write the analysis to the clone')
    parser_agent_analyze_projectcontext.set_defaults(func=agent_analyze_projectcontext)







    # clone command and subcommands
    parser_clone = sub_parsers.add_parser('clone', help='clone repository commands')
    clone_sub_parsers = parser_clone.add_subparsers(help='clone sub-commands')

    # clone list
    parser_clone_list = clone_sub_parsers.add_parser('list', help='list local repository clones')
    parser_clone_list.set_defaults(func=clone_list)

    # clone create
    parser_clone_create = clone_sub_parsers.add_parser('create', help='create local repository clone')
    parser_clone_create.add_argument('--repo', type=str, help='repository owner/repo/branch')
    parser_clone_create.set_defaults(func=clone_create)

    # clone delete
    parser_clone_delete = clone_sub_parsers.add_parser('delete', help='delete local repository clone')
    parser_clone_delete.add_argument('--repo', type=str, help='repository owner/repo/branch')
    parser_clone_delete.set_defaults(func=clone_delete)








    # setup command and subcommands
    parser_setup = sub_parsers.add_parser('setup', help='setup commands')
    setup_sub_parsers = parser_setup.add_subparsers(help='setup sub-commands')

    # setup newindex
    parser_setup_newindex = setup_sub_parsers.add_parser('newindex', help='create new index for RAG')
    parser_setup_newindex.set_defaults(func=setup_newindex)

    # setup env
    parser_setup_env = setup_sub_parsers.add_parser('env', help='display environment variables from settings')
    parser_setup_env.set_defaults(func=env)

    # setup ping
    parser_setup_ping = setup_sub_parsers.add_parser('ping', help='proof of life - returns text reversed')
    parser_setup_ping.add_argument('--text', type=str, help='text to reverse')
    parser_setup_ping.set_defaults(func=ping)


    args = parser.parse_args()
    args.func(args)

